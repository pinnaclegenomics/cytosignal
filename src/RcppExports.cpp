// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gauss_cpp
arma::mat gauss_cpp(const arma::mat& x, double sigma);
RcppExport SEXP _cytosignal_gauss_cpp(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_cpp(x, sigma));
    return rcpp_result_gen;
END_RCPP
}
// gauss_vec_cpp
arma::vec gauss_vec_cpp(const arma::vec& x, double sigma);
RcppExport SEXP _cytosignal_gauss_vec_cpp(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_vec_cpp(x, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rep_each_cpp
arma::vec rep_each_cpp(int l, int n);
RcppExport SEXP _cytosignal_rep_each_cpp(SEXP lSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_each_cpp(l, n));
    return rcpp_result_gen;
END_RCPP
}
// euclidean_cpp
arma::mat euclidean_cpp(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _cytosignal_euclidean_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// meanMat_cpp
arma::sp_mat meanMat_cpp(const List& l, int nrow, int ncol);
RcppExport SEXP _cytosignal_meanMat_cpp(SEXP lSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(meanMat_cpp(l, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// varMat_cpp
arma::mat varMat_cpp(const arma::mat& x);
RcppExport SEXP _cytosignal_varMat_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(varMat_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// stdMat_cpp
arma::mat stdMat_cpp(const arma::mat& x);
RcppExport SEXP _cytosignal_stdMat_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stdMat_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// pearson_col_cpp
arma::vec pearson_col_cpp(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _cytosignal_pearson_col_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_col_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// graphNicheLR_cpp_ori
arma::mat graphNicheLR_cpp_ori(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_graphNicheLR_cpp_ori(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(graphNicheLR_cpp_ori(dge_lig, dge_recep, lig_index, lig_list, recep_index, recep_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}
// graphNicheLR_cpp
arma::mat graphNicheLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_graphNicheLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(graphNicheLR_cpp(dge_lig, dge_recep, lig_index, lig_list, recep_index, recep_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}
// graphMeanLR_cpp
arma::mat graphMeanLR_cpp(const arma::vec& alpha_list, const arma::mat& dge_lig, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_graphMeanLR_cpp(SEXP alpha_listSEXP, SEXP dge_ligSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_list(alpha_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(graphMeanLR_cpp(alpha_list, dge_lig, lig_index, lig_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}
// VelographNicheLR_cpp
arma::mat VelographNicheLR_cpp(const arma::mat& dge_lig, const arma::mat& dge_recep, const arma::mat& dge_velo, const arma::uvec& lig_index, const arma::uvec& lig_list, const arma::uvec& recep_index, const arma::uvec& recep_list, const arma::uvec& nb_index, const arma::uvec& nb_list);
RcppExport SEXP _cytosignal_VelographNicheLR_cpp(SEXP dge_ligSEXP, SEXP dge_recepSEXP, SEXP dge_veloSEXP, SEXP lig_indexSEXP, SEXP lig_listSEXP, SEXP recep_indexSEXP, SEXP recep_listSEXP, SEXP nb_indexSEXP, SEXP nb_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_lig(dge_ligSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_recep(dge_recepSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dge_velo(dge_veloSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_index(lig_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lig_list(lig_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_index(recep_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type recep_list(recep_listSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_index(nb_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nb_list(nb_listSEXP);
    rcpp_result_gen = Rcpp::wrap(VelographNicheLR_cpp(dge_lig, dge_recep, dge_velo, lig_index, lig_list, recep_index, recep_list, nb_index, nb_list));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cytosignal_gauss_cpp", (DL_FUNC) &_cytosignal_gauss_cpp, 2},
    {"_cytosignal_gauss_vec_cpp", (DL_FUNC) &_cytosignal_gauss_vec_cpp, 2},
    {"_cytosignal_rep_each_cpp", (DL_FUNC) &_cytosignal_rep_each_cpp, 2},
    {"_cytosignal_euclidean_cpp", (DL_FUNC) &_cytosignal_euclidean_cpp, 2},
    {"_cytosignal_meanMat_cpp", (DL_FUNC) &_cytosignal_meanMat_cpp, 3},
    {"_cytosignal_varMat_cpp", (DL_FUNC) &_cytosignal_varMat_cpp, 1},
    {"_cytosignal_stdMat_cpp", (DL_FUNC) &_cytosignal_stdMat_cpp, 1},
    {"_cytosignal_pearson_col_cpp", (DL_FUNC) &_cytosignal_pearson_col_cpp, 2},
    {"_cytosignal_graphNicheLR_cpp_ori", (DL_FUNC) &_cytosignal_graphNicheLR_cpp_ori, 8},
    {"_cytosignal_graphNicheLR_cpp", (DL_FUNC) &_cytosignal_graphNicheLR_cpp, 8},
    {"_cytosignal_graphMeanLR_cpp", (DL_FUNC) &_cytosignal_graphMeanLR_cpp, 6},
    {"_cytosignal_VelographNicheLR_cpp", (DL_FUNC) &_cytosignal_VelographNicheLR_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_cytosignal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
